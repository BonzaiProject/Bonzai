<!--
BONZAI
(was phpGuardian)

CODENAME:  caffeine
VERSION:   0.2

URL:       http://www.bonzai-project.org
E-MAIL:    info@bonzai-project.org

COPYRIGHT: 2006 - 2012 Bonzai (Fabio Cicerchia). All rights reserved.
LICENSE:   MIT or GNU GPL 2
           The MIT License is recommended for most projects, it's simple and
           easy to understand  and it places  almost no restrictions on what
           you can do with Bonzai.
           If the GPL  suits your project  better you are  also free to  use
           Bonzai under that license.
           You don't have  to do anything  special to choose  one license or
           the other  and you don't have to notify  anyone which license you
           are using.  You are free  to use Bonzai in commercial projects as
           long as the copyright header is left intact.
           <http://www.opensource.org/licenses/mit-license.php>
           <http://www.opensource.org/licenses/gpl-2.0.php>
-->

<?xml version="1.0" encoding="UTF-8"?>

<project name="Bonzai" default="build" basedir=".">
    <property name="source" value="src"/>

    <target name="clean" description="Clean up and create artifact directories">
        <delete dir="${basedir}/build/api"/>
        <delete dir="${basedir}/build/code-browser"/>
        <delete dir="${basedir}/build/coverage"/>
        <delete dir="${basedir}/build/logs"/>
        <delete dir="${basedir}/build/pdepend"/>

        <mkdir dir="${basedir}/build/api"/>
        <mkdir dir="${basedir}/build/code-browser"/>
        <mkdir dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/logs"/>
        <mkdir dir="${basedir}/build/pdepend"/>
    </target>

    <target name="phpunit" description="Run unit tests using PHPUnit and generates junit.xml and clover.xml">
        <exec executable="phpunit" failonerror="true">
            <arg line="--log-junit ${basedir}/build/logs/junit.xml -c ${basedir}/tests/Test.xml" />
        </exec>
    </target>

    <target name="parallelTasks" description="Run the pdepend, phpmd, phpcpd, phpcs, phpdoc and phploc tasks in parallel using a maximum of 2 threads.">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend"/>
                <antcall target="phpmd"/>
            </sequential>
            <antcall target="phpcpd"/>
            <antcall target="phpcs"/>
            <antcall target="phpdoc"/>
            <antcall target="phploc"/>
        </parallel>
    </target>

    <target name="pdepend" description="Generate jdepend.xml and software metrics charts using PHP_Depend">
        <exec executable="pdepend">
            <arg line="--jdepend-xml=${basedir}/build/logs/jdepend.xml --jdepend-chart=${basedir}/build/pdepend/dependencies.svg --overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg ${source}" />
        </exec>
    </target>

    <target name="phpmd" description="Generate pmd.xml using PHPMD">
        <exec executable="phpmd">
            <arg line="${source} xml build/phpmd.xml --reportfile ${basedir}/build/logs/pmd.xml" />
        </exec>
    </target>

    <target name="phpcpd" description="Generate pmd-cpd.xml using PHPCPD">
        <exec executable="phpcpd">
            <arg line="--log-pmd ${basedir}/build/logs/pmd-cpd.xml ${source}" />
        </exec>
    </target>

    <target name="phploc" description="Generate phploc.csv">
        <exec executable="phploc">
            <arg line="--log-csv ${basedir}/build/logs/phploc.csv ${source}" />
        </exec>
    </target>

    <target name="phpcs" description="Generate checkstyle.xml using PHP_CodeSniffer">
        <exec executable="phpcs" output="/dev/null">
            <arg line="--report=checkstyle --report-file=${basedir}/build/logs/checkstyle.xml --standard=build/phpcs.xml ${source}" />
        </exec>
    </target>

    <target name="phpdoc" description="Generate API documentation using PHPDocumentor">
        <exec executable="phpdoc">
            <arg line="-d ${source} -t ${basedir}/build/api" />
        </exec>
    </target>

    <target name="phpcb" description="Aggregate tool output with PHP_CodeBrowser">
        <exec executable="phpcb">
            <arg line="--log    ${basedir}/build/logs --source ${source} --output ${basedir}/build/code-browser" />
        </exec>
    </target>

    <target name="build" depends="clean,parallelTasks,phpunit,phpcb" />
</project>
