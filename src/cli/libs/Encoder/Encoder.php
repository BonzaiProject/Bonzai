<?php
/**
 *
 * BONZAI
 * (was phpGuardian)
 *
 * CODE NAME:      phoenix
 * ENGINE VERSION: 0.1
 * MODULE VERSION: 0.1
 *
 * URL:            http://bonzai.fabiocicerchia.it
 * E-MAIL:         bonzai@fabiocicerchia.it
 *
 * COPYRIGHT:      2006-2011 Bonzai - Fabio Cicerchia. All rights reserved.
 * LICENSE:        MIT or GNU GPL 2
 *                 The MIT License is recommended for most projects, it's simple
 *                 and  easy  to understand and it places almost no restrictions
 *                 on  what  you  can do with Bonzai.
 *                 If  the  GPL  suits  your project better you are also free to
 *                 use Bonzai under that license.
 *                 You   don't  have  to  do  anything  special  to  choose  one
 *                 license  or  the  other  and  you don't have to notify anyone
 *                 which   license   you   are   using.  You  are  free  to  use
 *                 Bonzai  in  commercial  projects  as  long  as  the copyright
 *                 header is left intact.
 *                 <http://www.opensource.org/licenses/mit-license.php>
 *                 <http://www.opensource.org/licenses/gpl-2.0.php>
 **/

/**
 *
 * @category  Security
 * @package   Bonzai
 * @version   0.1
 * @author    Fabio Cicerchia <info@fabiocicerchia.it>
 * @copyright 2006-2011 Bonzai - Fabio Cicerchia. All rights reserved.
 * @license   http://www.opensource.org/licenses/mit-license.php MIT
 * @license   http://www.opensource.org/licenses/gpl-2.0.php     GNU GPL 2
 * @link      http://bonzai.fabiocicerchia.it
 */
class Bonzai_Encoder
{
    // {{{ METHODS
    // {{{ function elaborate
    /**
     *
     * @access public
     * @param  array        $element
     * @throws Bonzai_Exception
     * @return void
     */
    public function elaborate($element)
    {
        if (!is_array($element) || empty($element)) {
            throw new Bonzai_Exception('The element is invalid'); // TODO: NON BLOCKER
        }

        // Get the filename
        $filename = $element['FILE'];

        // Print a message
        Bonzai_Utils::bonzai_message('Start encoding file `%s\'.', false, filename);

        // Get the content
        $file_content = Bonzai_Utils::getFileContent($filename);

        // Convert the content
        // TODO: $converted_content = Bonzai_Converter::convert($file_content, Bonzai_Script_Parser::$config['SETUP']['USE_ASP_TAGS']); // TODO: too long

        // TODO: $encoded_content = $this->codeCrypt($converted_content);

        /* TODO: if (empty($encoded_content)) {
            // Set the file as skipped
            Bonzai_Registry::getInstance()->append('skipped_files', $filename, Bonzai_Registry::ARRAY_APPEND); // TODO: too long

            // Print a message
            Bonzai_Utils::bonzai_message('ERROR: The encoded data is empty.', false);
            return;
        }*/

        Bonzai_Utils::rename_file($filename);
        $encoded_filename = $this->getEncodedFilename($filename);

        // Print a message
        // TODO: Bonzai_Utils::bonzai_message("Saving %s bytes...", true, strlen($encoded_content)); // TODO: too long

        // Save the file
        // TODO: Bonzai_Utils::putFileContent($encoded_filename, $encoded_content . $this->getHeader($element, $this->getInner()) . $this->getFooter($element)); // TODO: too long
    }
    // }}}

    // {{{ function codeCrypt
    /**
     *
     * @access protected
     * @param  string        $data
     * @return string | null
     */
    protected function codeCrypt($data)
    {
        if (empty($data)) {
            // Print a message
            Bonzai_Utils::bonzai_message('ERROR: The converted data is empty.', false);

            return null;
        }

        $data_len = strlen($data);
        // TODO: $key_len  = strlen(Bonzai_Script_Parser::$config['KEY']['KEY_HASH']);

        // Increase file counter
        Bonzai_Registry::getInstance()->append('total_files', 1, Bonzai_Registry::INTEGER_APPEND); // TODO: too long

        // Check key size
        /* TODO: if ($key_len == 0) {
            Bonzai_Utils::bonzai_message('ERROR: Skipped because the private key is empty.', false); // TODO: too long
            return "";
        }*/

        // Print a message
        Bonzai_Utils::bonzai_message('Encoding %d bytes...', true, $data_len);

        // Encrypt the data
        // TODO: USE APC + ECC...

        // Increase the total generated bytes
        // TODO: Bonzai_Registry::getInstance()->append('total_generated_bytes', strlen($crdata), Bonzai_Registry::INTEGER_APPEND); // TODO: too long

        // Print a message
        // TODO: Bonzai_Utils::bonzai_message('Generated %s bytes.', true, strlen($crdata));

        // TODO: return $crdata;
    }
    // }}}

    // {{{ function getInner
    /**
     *
     * @access protected
     * @return string
     */
    protected function getInner()
    {
        $PHBonzai_LIBRARY_STRING        = ''; // TODO: need include this from .h
        $Bonzai_S_BASE_LIB_PATH         = ''; // TODO: need include this from .h
        $PHBonzai_EXTENSION_STRING      = ''; // TODO: need include this from .h
        $Bonzai_S_EXTENSION_MODULE_PATH = ''; // TODO: need include this from .h

        /* TODO: if (Bonzai_Script_Parser::$config['SETUP']['USE_PHP_EXTENSION']) {
            return $BONZAI_EXTENSION_STRING . $BONZAI_S_EXTENSION_MODULE_PATH; // TODO: MISSING STRINGS
        }*/

        return $BONZAI_LIBRARY_STRING . $BONZAI_S_BASE_LIB_PATH; // TODO: MISSING STRINGS
    }
    // }}}

    // {{{ function getHeader
    /**
     *
     * @access protected
     * @param  array     $element
     * @param  string    $inner
     * @return string
     */
    protected function getHeader($element, $inner)
    {
        /* TODO: if ($element['HEADER'] == Bonzai_Script_Parser::$config['CONFIGURATION']['HEADER']) { // TODO: too long
            return '<?php' . PHP_EOL . PHP_EOL . Bonzai_Script_Parser::$config['CONFIGURATION']['HEADER'] . $inner; // TODO: too long
        }*/

        return '<?php' . PHP_EOL . PHP_EOL . $element['HEADER'] . $inner;
    }
    // }}}

    // {{{ function getFooter
    /**
     *
     * @access protected
     * @param  array     $element
     * @return string
     */
    protected function getFooter($element)
    {
        /* TODO: if ($element['FOOTER'] == Bonzai_Script_Parser::$config['CONFIGURATION']['FOOTER']) { // TODO: too long
            return '\');' . PHP_EOL . Bonzai_Script_Parser::$config['CONFIGURATION']['FOOTER'] . PHP_EOL . '?>'; // TODO: too long
        }*/

        return '\');' . PHP_EOL . $element['FOOTER'] . PHP_EOL . '?>';
    }
    // }}}

    // {{{ function getEncodedFilename
    /**
     *
     * @access protected
     * @param  string    $filename
     * @return string
     */
    protected function getEncodedFilename($filename)
    {
        /* TODO: if (Bonzai_Script_Parser::$config['CONFIGURATION']['SAVE_ENCODED_AS_NEW']) {
            return "$filename.encoded";
        }*/

        return $filename;
    }
    // }}}
    // }}}
}
